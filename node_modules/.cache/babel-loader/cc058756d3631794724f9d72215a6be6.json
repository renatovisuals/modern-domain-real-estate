{"ast":null,"code":"import parseDuration from \"./parseDuration\";\nexport function parseTransition(transition) {\n  var lastProperty = null;\n  var firstProperty = null;\n  var lastPropertyTotalDuration = -1;\n  var firstPropertyDelay = 99999999;\n  transition.split(/\\s*,\\s*(?![^\\(]*\\))/g).forEach(function (entry) {\n    var parts = entry.split(/\\s+(?![^\\(]*\\))/g);\n    var property = parts.filter(function (p) {\n      return p.match(/^[a-z\\-A-Z]+$/);\n    })[0];\n\n    var _a = parts.filter(function (p) {\n      return p.match(/^[0-9]+m?s$/);\n    }).map(function (p) {\n      return parseDuration(p);\n    }),\n        _b = _a[0],\n        duration = _b === void 0 ? 0 : _b,\n        _c = _a[1],\n        delay = _c === void 0 ? 0 : _c;\n\n    var totalDuration = duration + delay;\n\n    if (totalDuration > lastPropertyTotalDuration) {\n      lastPropertyTotalDuration = totalDuration;\n      lastProperty = {\n        property: property,\n        duration: duration,\n        delay: delay\n      };\n    }\n\n    if (delay < firstPropertyDelay) {\n      firstPropertyDelay = delay;\n      firstProperty = {\n        property: property,\n        duration: duration,\n        delay: delay\n      };\n    }\n  });\n  return [firstProperty, lastProperty];\n}\nexport default parseTransition;","map":null,"metadata":{},"sourceType":"module"}