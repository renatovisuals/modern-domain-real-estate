{"ast":null,"code":"import { combine, withState, withHandlers, withProps, onDidMount, onWillUnmount, onWillReceiveProps, isolate, integrate, onDidUpdate } from \"reassemble\";\nimport runInFrame from \"../utils/runInFrame\";\nimport pick from \"../utils/pick\";\nimport { ActionID, StateID, actionPropKeys } from \"../reducer\";\n\nvar pickTransitionState = function pickTransitionState(state) {\n  return pick(state, \"style\", \"className\", \"inTransition\", \"id\");\n};\n\nexport var withTransitionState = function withTransitionState(reduce) {\n  return combine(isolate(withProps(function (props) {\n    return {\n      actionProps: pick.apply(void 0, [props].concat(actionPropKeys))\n    };\n  }), withState(\"transitionState\", \"setTransitionState\", function (_a) {\n    var actionProps = _a.actionProps;\n    return pickTransitionState(reduce(StateID.EntryPoint, {\n      kind: ActionID.New,\n      props: actionProps\n    }).state);\n  }), withHandlers(function (initialProps) {\n    var stateID = reduce(StateID.EntryPoint, {\n      kind: ActionID.New,\n      props: initialProps\n    }).state.id;\n    var cancelPending = null;\n    var pendingCallback;\n\n    var _cancelPendingIfExistent = function cancelPendingIfExistent() {\n      if (cancelPending) {\n        cancelPending();\n        cancelPending = null;\n      }\n    };\n\n    return {\n      cancelPendingIfExistent: function cancelPendingIfExistent() {\n        return _cancelPendingIfExistent;\n      },\n      runPending: function runPending() {\n        return function () {\n          var callback = pendingCallback;\n          pendingCallback = null;\n\n          if (callback) {\n            callback();\n          }\n        };\n      },\n      dispatch: function dispatch(_a) {\n        var actionProps = _a.actionProps,\n            onTransitionComplete = _a.onTransitionComplete,\n            setTransitionState = _a.setTransitionState;\n\n        var run = function run(actionID) {\n          var result = reduce(stateID, {\n            kind: actionID,\n            props: actionProps\n          });\n\n          if (!result) {\n            return;\n          }\n\n          if (result.completed && onTransitionComplete) {\n            onTransitionComplete();\n          }\n\n          var state = result.state,\n              pending = result.pending;\n          stateID = state.id;\n\n          _cancelPendingIfExistent();\n\n          if (pending) {\n            pendingCallback = function pendingCallback() {\n              cancelPending = runInFrame(1, function () {\n                return run(pending);\n              });\n            };\n          }\n\n          setTransitionState(pickTransitionState(state));\n        };\n\n        return run;\n      }\n    };\n  }), withHandlers({\n    onTransitionBegin: function onTransitionBegin(_a) {\n      var dispatch = _a.dispatch;\n      return function () {\n        return dispatch(ActionID.TransitionStart);\n      };\n    },\n    onTransitionComplete: function onTransitionComplete(_a) {\n      var dispatch = _a.dispatch;\n      return function () {\n        return dispatch(ActionID.TransitionComplete);\n      };\n    },\n    timeout: function timeout(_a) {\n      var dispatch = _a.dispatch;\n      return function () {\n        return dispatch(ActionID.Timeout);\n      };\n    }\n  }), onDidMount(function (_a) {\n    var dispatch = _a.dispatch;\n    dispatch(ActionID.Mount);\n  }), onWillReceiveProps(function (_a, _b) {\n    var prevActive = _a.active;\n    var nextActive = _b.active,\n        dispatch = _b.dispatch;\n\n    if (prevActive === nextActive) {\n      return;\n    }\n\n    dispatch(ActionID.TransitionTrigger);\n  }), onDidUpdate(function (_a) {\n    var runPending = _a.runPending;\n    runPending();\n  }), onWillUnmount(function (_a) {\n    var cancelPendingIfExistent = _a.cancelPendingIfExistent;\n    cancelPendingIfExistent();\n  }), integrate(\"timeout\", \"transitionState\", \"onTransitionBegin\", \"onTransitionComplete\")));\n};","map":null,"metadata":{},"sourceType":"module"}