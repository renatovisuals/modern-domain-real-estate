{"ast":null,"code":"var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { stateCallback, propsCallback } from \"./blueprint\";\nimport resolveValue from \"./utils/resolveValue\";\nexport function withReducer(stateName, dispatcherName, reducer, initialValue) {\n  return {\n    instanceCallbacks: function instanceCallbacks() {\n      var update;\n      var name;\n      var dispatcher;\n      var curState;\n      return [stateCallback(function (initState, props) {\n        var newState = initState(String(stateName), resolveValue(initialValue, props));\n        update = newState.updater;\n        name = newState.name;\n\n        dispatcher = function dispatcher(action, callback) {\n          return update(reducer(curState, action), callback);\n        };\n      }), propsCallback(function (props, state) {\n        curState = state[name];\n        return __assign({}, props, (_a = {}, _a[stateName] = curState, _a[dispatcherName] = dispatcher, _a));\n\n        var _a;\n      })];\n    }\n  };\n}\nexport default withReducer;","map":null,"metadata":{},"sourceType":"module"}