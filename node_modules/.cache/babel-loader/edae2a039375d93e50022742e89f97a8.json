{"ast":null,"code":"import { withHandlers, isolate, onWillReceiveProps, onDidUpdate, onWillUnmount } from \"reassemble\";\nexport var timeoutMultiplier = 3;\nexport var withTimeout = isolate(withHandlers(function () {\n  var timeoutID;\n  return {\n    timeoutIn: function timeoutIn(_a) {\n      var timeout = _a.timeout;\n      return function (ms) {\n        return timeoutID = setTimeout(timeout, ms);\n      };\n    },\n    cancel: function cancel() {\n      return function () {\n        return clearTimeout(timeoutID);\n      };\n    }\n  };\n}), onWillReceiveProps(function (_a, _b) {\n  var inTransition = _a.transitionState.inTransition,\n      active = _a.active;\n  var nextInTransition = _b.transitionState.inTransition,\n      cancel = _b.cancel,\n      nextActive = _b.active;\n  var inTransitionChanged = inTransition !== nextInTransition;\n  var interrupted = nextInTransition && active !== nextActive;\n\n  if (inTransitionChanged || interrupted) {\n    cancel();\n  }\n}), onDidUpdate(function (_a, _b) {\n  var inTransition = _a.transitionState.inTransition,\n      active = _a.active;\n  var nextInTransition = _b.transitionState.inTransition,\n      totalDuration = _b.transitionInfo.totalDuration,\n      timeoutIn = _b.timeoutIn,\n      nextActive = _b.active;\n  var newTransition = !inTransition && nextInTransition;\n  var interrupted = nextInTransition && active !== nextActive;\n\n  if (newTransition || interrupted) {\n    if (nextInTransition) {\n      timeoutIn(totalDuration * timeoutMultiplier);\n    }\n  }\n}), onWillUnmount(function (_a) {\n  var cancel = _a.cancel;\n  return cancel();\n}));","map":null,"metadata":{},"sourceType":"module"}