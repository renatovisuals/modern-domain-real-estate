{"ast":null,"code":"var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { propsCallback } from \"./blueprint\";\nimport resolveValue from \"./utils/resolveValue\";\nimport getKeysAndSymbols from \"./utils/getKeysAndSymbols\";\nexport function withHandlers(handlerCreators) {\n  return {\n    instanceCallbacks: function instanceCallbacks() {\n      var handlers;\n      var handlerProps;\n      return [propsCallback(function (props) {\n        if (!handlers) {\n          handlers = {};\n          var resolvedHandlers_1 = resolveValue(handlerCreators, props);\n          getKeysAndSymbols(resolvedHandlers_1).forEach(function (name) {\n            return handlers[name] = function () {\n              var args = [];\n\n              for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n              }\n\n              return resolvedHandlers_1[name](handlerProps).apply(void 0, args);\n            };\n          });\n        }\n\n        handlerProps = props;\n        return __assign({}, props, handlers);\n      })];\n    }\n  };\n}\nexport default withHandlers;","map":null,"metadata":{},"sourceType":"module"}