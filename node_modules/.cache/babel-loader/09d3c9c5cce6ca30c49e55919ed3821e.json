{"ast":null,"code":"/* tslint:disable: variable-name no-switch-case-fall-through */\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { resolveTransit } from \"./transit\";\nexport var StateID;\n\n(function (StateID) {\n  StateID[StateID[\"EntryPoint\"] = 0] = \"EntryPoint\";\n  StateID[StateID[\"DefaultNew\"] = 1] = \"DefaultNew\";\n  StateID[StateID[\"ActiveNew\"] = 2] = \"ActiveNew\";\n  StateID[StateID[\"AppearNew\"] = 3] = \"AppearNew\";\n  StateID[StateID[\"Default\"] = 4] = \"Default\";\n  StateID[StateID[\"Active\"] = 5] = \"Active\";\n  StateID[StateID[\"AppearInit\"] = 6] = \"AppearInit\";\n  StateID[StateID[\"AppearPrepare\"] = 7] = \"AppearPrepare\";\n  StateID[StateID[\"AppearTriggered\"] = 8] = \"AppearTriggered\";\n  StateID[StateID[\"AppearStarted\"] = 9] = \"AppearStarted\";\n  StateID[StateID[\"EnterInit\"] = 10] = \"EnterInit\";\n  StateID[StateID[\"EnterPrepare\"] = 11] = \"EnterPrepare\";\n  StateID[StateID[\"EnterTriggered\"] = 12] = \"EnterTriggered\";\n  StateID[StateID[\"EnterStarted\"] = 13] = \"EnterStarted\";\n  StateID[StateID[\"LeaveInit\"] = 14] = \"LeaveInit\";\n  StateID[StateID[\"LeavePrepare\"] = 15] = \"LeavePrepare\";\n  StateID[StateID[\"LeaveTriggered\"] = 16] = \"LeaveTriggered\";\n  StateID[StateID[\"LeaveStarted\"] = 17] = \"LeaveStarted\";\n})(StateID || (StateID = {}));\n\nexport var StateIDList = [StateID.ActiveNew, StateID.DefaultNew, StateID.AppearNew, StateID.Active, StateID.Default, StateID.AppearInit, StateID.AppearTriggered, StateID.AppearStarted, StateID.EnterInit, StateID.EnterTriggered, StateID.EnterStarted, StateID.LeaveInit, StateID.LeaveTriggered, StateID.LeaveStarted, StateID.AppearPrepare, StateID.EnterPrepare, StateID.LeavePrepare];\nexport var ActionID;\n\n(function (ActionID) {\n  ActionID[ActionID[\"New\"] = 0] = \"New\";\n  ActionID[ActionID[\"Mount\"] = 1] = \"Mount\";\n  ActionID[ActionID[\"TransitionInit\"] = 2] = \"TransitionInit\";\n  ActionID[ActionID[\"TransitionPrepare\"] = 3] = \"TransitionPrepare\";\n  ActionID[ActionID[\"TransitionTrigger\"] = 4] = \"TransitionTrigger\";\n  ActionID[ActionID[\"TransitionStart\"] = 5] = \"TransitionStart\";\n  ActionID[ActionID[\"TransitionComplete\"] = 6] = \"TransitionComplete\";\n  ActionID[ActionID[\"Timeout\"] = 7] = \"Timeout\";\n})(ActionID || (ActionID = {}));\n\nexport var actionPropKeys = [\"active\", \"transitionAppear\", \"transitionDelay\", \"defaultStyle\", \"activeStyle\", \"appearStyle\", \"enterStyle\", \"leaveStyle\", \"appearInitStyle\", \"enterInitStyle\", \"leaveInitStyle\", \"defaultClassName\", \"activeClassName\", \"appearClassName\", \"enterClassName\", \"leaveClassName\", \"appearInitClassName\", \"enterInitClassName\", \"leaveInitClassName\"];\nexport var transitionNames = [\"enter\", \"leave\", \"appear\"];\nexport function hasTransition(name, props) {\n  var result = props[name + \"Style\"] !== undefined || props[name + \"ClassName\"] !== undefined;\n  return !result && name === \"appear\" ? hasTransition(\"enter\", props) : result;\n}\nexport function getDelay(name, delay) {\n  if (!delay) {\n    return 0;\n  }\n\n  if (typeof delay === \"number\") {\n    return delay;\n  }\n\n  return delay[name] ? delay[name] : 0;\n}\nexport function getState(id, name, props, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  if (name === \"appear\" && !props.appearStyle && !props.appearClassName) {\n    return getState(id, \"enter\", props, params);\n  }\n\n  var style;\n  var className;\n  var inTransition = false;\n\n  if (params.mode === \"init\" || params.mode === \"prepare\") {\n    style = props[name + \"InitStyle\"];\n    className = props[name + \"InitClassName\"];\n\n    if (style === undefined && className === undefined) {\n      if (name === \"enter\" || name === \"appear\") {\n        style = props.defaultStyle;\n        className = props.defaultClassName;\n      } else if (name === \"leave\") {\n        style = props.activeStyle;\n        className = props.activeClassName;\n      }\n    } // Setting transition before starting one fixes issues on IE & Edge...\n\n\n    if (params.mode === \"prepare\" && style !== undefined) {\n      var tmp = resolveTransit(props[name + \"Style\"], getDelay(name, props.transitionDelay));\n\n      if (tmp.transition) {\n        style = __assign({}, style, {\n          transition: tmp.transition\n        });\n      }\n    }\n  } else {\n    style = props[name + \"Style\"];\n    className = props[name + \"ClassName\"];\n\n    if ([\"enter\", \"appear\", \"leave\"].indexOf(name) >= 0) {\n      inTransition = true;\n      style = resolveTransit(style, getDelay(name, props.transitionDelay));\n    }\n  }\n\n  style = style || {};\n  className = className || \"\";\n  return {\n    id: id,\n    style: style,\n    className: className,\n    inTransition: inTransition\n  };\n}\nexport function stateFunc(id, name, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return function (props) {\n    return getState(id, name, props, params);\n  };\n}\nexport var activeNewState = stateFunc(StateID.ActiveNew, \"active\");\nexport var defaultNewState = stateFunc(StateID.DefaultNew, \"default\");\nexport var appearNewState = stateFunc(StateID.AppearNew, \"appear\", {\n  mode: \"init\"\n});\nexport var activeState = stateFunc(StateID.Active, \"active\");\nexport var defaultState = stateFunc(StateID.Default, \"default\");\nexport var appearInitState = stateFunc(StateID.AppearInit, \"appear\", {\n  mode: \"init\"\n});\nexport var enterInitState = stateFunc(StateID.EnterInit, \"enter\", {\n  mode: \"init\"\n});\nexport var leaveInitState = stateFunc(StateID.LeaveInit, \"leave\", {\n  mode: \"init\"\n});\nexport var appearPrepareState = stateFunc(StateID.AppearPrepare, \"appear\", {\n  mode: \"prepare\"\n});\nexport var enterPrepareState = stateFunc(StateID.EnterPrepare, \"enter\", {\n  mode: \"prepare\"\n});\nexport var leavePrepareState = stateFunc(StateID.LeavePrepare, \"leave\", {\n  mode: \"prepare\"\n});\nexport var appearTriggeredState = stateFunc(StateID.AppearTriggered, \"appear\");\nexport var enterTriggeredState = stateFunc(StateID.EnterTriggered, \"enter\");\nexport var leaveTriggeredState = stateFunc(StateID.LeaveTriggered, \"leave\");\nexport var appearStartedState = stateFunc(StateID.AppearStarted, \"appear\");\nexport var enterStartedState = stateFunc(StateID.EnterStarted, \"enter\");\nexport var leaveStartedState = stateFunc(StateID.LeaveStarted, \"leave\");\n\nvar invalidTransitionError = function invalidTransitionError(stateID, actionID) {\n  return new Error(\"invalid state transition from \" + StateID[stateID] + \" with \" + ActionID[actionID]);\n};\n\nexport var reducer = function reducer(stateID, action) {\n  var props = action.props;\n  var nextState;\n\n  switch (action.kind) {\n    case ActionID.New:\n      if (stateID !== StateID.EntryPoint) {\n        throw new Error(\"invalid entrypoint\");\n      }\n\n      if (props.active) {\n        if (props.transitionAppear) {\n          return {\n            state: appearNewState(props)\n          };\n        }\n\n        return {\n          state: activeNewState(props)\n        };\n      }\n\n      if (!props.transitionAppear && props.active) {\n        return {\n          state: activeNewState(props)\n        };\n      }\n\n      return {\n        state: defaultNewState(props)\n      };\n\n    case ActionID.Mount:\n      switch (stateID) {\n        case StateID.AppearNew:\n          return reducer(stateID, {\n            kind: ActionID.TransitionTrigger,\n            props: props\n          });\n\n        default:\n          return null;\n      }\n\n    case ActionID.TransitionInit:\n      switch (stateID) {\n        case StateID.DefaultNew:\n        case StateID.Default:\n          if (!hasTransition(\"enter\", props)) {\n            return {\n              state: activeState(props),\n              completed: true\n            };\n          }\n\n          nextState = enterInitState(props);\n          break;\n\n        case StateID.ActiveNew:\n        case StateID.Active:\n          if (!hasTransition(\"leave\", props)) {\n            return {\n              state: defaultState(props),\n              completed: true\n            };\n          }\n\n          nextState = leaveInitState(props);\n          break;\n\n        case StateID.AppearNew:\n          if (!hasTransition(\"appear\", props)) {\n            return {\n              state: activeState(props),\n              completed: true\n            };\n          }\n\n          nextState = appearInitState(props);\n          break;\n\n        default:\n          throw invalidTransitionError(stateID, action.kind);\n      }\n\n      ;\n      return {\n        state: nextState,\n        pending: ActionID.TransitionPrepare\n      };\n\n    case ActionID.TransitionPrepare:\n      switch (stateID) {\n        case StateID.EnterInit:\n          if (!props.active) {\n            return {\n              state: defaultState(props),\n              completed: true\n            };\n          }\n\n          nextState = enterPrepareState(props);\n          break;\n\n        case StateID.LeaveInit:\n          if (props.active) {\n            return {\n              state: activeState(props),\n              completed: true\n            };\n          }\n\n          nextState = leavePrepareState(props);\n          break;\n\n        case StateID.AppearInit:\n          if (!props.active) {\n            return {\n              state: defaultState(props),\n              completed: true\n            };\n          }\n\n          nextState = appearPrepareState(props);\n          break;\n\n        default:\n          throw invalidTransitionError(stateID, action.kind);\n      }\n\n      ;\n      return {\n        state: nextState,\n        pending: ActionID.TransitionTrigger\n      };\n\n    case ActionID.TransitionStart:\n      switch (stateID) {\n        case StateID.EnterTriggered:\n          return {\n            state: enterStartedState(props)\n          };\n\n        case StateID.LeaveTriggered:\n          return {\n            state: leaveStartedState(props)\n          };\n\n        case StateID.AppearTriggered:\n          return {\n            state: appearStartedState(props)\n          };\n\n        default:\n          // We don't error out, because the workaround for transitionstart\n          // could happen after transitionend.\n          return null;\n      }\n\n    case ActionID.TransitionComplete:\n      switch (stateID) {\n        case StateID.AppearTriggered:\n        case StateID.AppearStarted:\n        case StateID.EnterTriggered:\n        case StateID.EnterStarted:\n          return {\n            state: activeState(props),\n            completed: true\n          };\n\n        case StateID.LeaveTriggered:\n        case StateID.LeaveStarted:\n          return {\n            state: defaultState(props),\n            completed: true\n          };\n\n        default:\n          throw invalidTransitionError(stateID, action.kind);\n      }\n\n    case ActionID.TransitionTrigger:\n      switch (stateID) {\n        case StateID.ActiveNew:\n        case StateID.Active:\n        case StateID.DefaultNew:\n        case StateID.Default:\n        case StateID.AppearNew:\n          return reducer(stateID, {\n            kind: ActionID.TransitionInit,\n            props: props\n          });\n\n        case StateID.EnterInit:\n          return {\n            state: defaultState(props),\n            completed: true\n          };\n\n        case StateID.LeaveInit:\n          return {\n            state: activeState(props),\n            completed: true\n          };\n\n        case StateID.AppearInit:\n          return {\n            state: defaultState(props),\n            completed: true\n          };\n\n        case StateID.EnterPrepare:\n          if (props.active) {\n            return {\n              state: enterTriggeredState(props)\n            };\n          }\n\n          return {\n            state: defaultState(props),\n            completed: true\n          };\n\n        case StateID.LeavePrepare:\n          if (!props.active) {\n            return {\n              state: leaveTriggeredState(props)\n            };\n          }\n\n          return {\n            state: activeState(props),\n            completed: true\n          };\n\n        case StateID.AppearPrepare:\n          if (props.active) {\n            return {\n              state: appearTriggeredState(props)\n            };\n          }\n\n          return {\n            state: defaultState(props),\n            completed: true\n          };\n\n        case StateID.EnterTriggered:\n          return {\n            state: defaultState(props),\n            completed: true\n          };\n\n        case StateID.LeaveTriggered:\n          return {\n            state: activeState(props),\n            completed: true\n          };\n\n        case StateID.AppearTriggered:\n          return {\n            state: defaultState(props),\n            completed: true\n          };\n\n        case StateID.AppearStarted:\n        case StateID.EnterStarted:\n          return {\n            state: leaveStartedState(props)\n          };\n\n        case StateID.LeaveStarted:\n          return {\n            state: enterStartedState(props)\n          };\n\n        default:\n          throw invalidTransitionError(stateID, action.kind);\n      }\n\n    case ActionID.Timeout:\n      switch (stateID) {\n        case StateID.AppearTriggered:\n        case StateID.AppearStarted:\n        case StateID.EnterTriggered:\n        case StateID.EnterStarted:\n          return {\n            state: activeState(props),\n            completed: true\n          };\n\n        case StateID.LeaveTriggered:\n        case StateID.LeaveStarted:\n          return {\n            state: defaultState(props),\n            completed: true\n          };\n\n        default:\n          throw invalidTransitionError(stateID, action.kind);\n      }\n\n    default:\n  }\n\n  throw new Error(\"unexpected error\");\n};","map":null,"metadata":{},"sourceType":"module"}