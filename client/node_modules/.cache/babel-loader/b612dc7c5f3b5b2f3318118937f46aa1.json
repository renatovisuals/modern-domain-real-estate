{"ast":null,"code":"var __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) d[p] = b[p];\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from \"react\";\nimport { Component, Children, cloneElement } from \"react\";\nimport * as TransitionGroup from \"react-transition-group/TransitionGroup\";\n\nvar CSSTransitionGroup = function (_super) {\n  __extends(CSSTransitionGroup, _super);\n\n  function CSSTransitionGroup() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.mounted = false;\n\n    _this.componentDidMount = function () {\n      return _this.mounted = true;\n    };\n\n    return _this;\n  }\n\n  CSSTransitionGroup.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        transitionAppear = _a.transitionAppear,\n        children = _a.children,\n        rest = __rest(_a, [\"transitionAppear\", \"children\"]);\n\n    return React.createElement(TransitionGroup, __assign({}, rest), Children.map(children, function (child, index) {\n      return React.createElement(CSSTransitionGroupChild, {\n        transitionAppear: transitionAppear,\n        mounted: _this.mounted,\n        key: child.key\n      }, child);\n    }));\n  };\n\n  return CSSTransitionGroup;\n}(Component);\n\nexport { CSSTransitionGroup };\nCSSTransitionGroup.defaultProps = {\n  component: \"div\"\n};\n\nvar CSSTransitionGroupChild = function (_super) {\n  __extends(CSSTransitionGroupChild, _super);\n\n  function CSSTransitionGroupChild(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.onTransitionComplete = function () {\n      var child = Children.only(_this.props.children);\n\n      if (child.props.onTransitionComplete) {\n        child.props.onTransitionComplete();\n      }\n\n      if (_this.leaveDone) {\n        _this.leaveDone();\n      }\n    };\n\n    _this.state = {\n      active: true,\n      transitionAppear: props.mounted || props.transitionAppear\n    };\n    return _this;\n  }\n\n  CSSTransitionGroupChild.prototype.componentWillAppear = function (done) {\n    done();\n  };\n\n  CSSTransitionGroupChild.prototype.componentWillEnter = function (done) {\n    // component was leaving but was interrupted.\n    if (!this.state.active) {\n      this.setState({\n        active: true\n      });\n      this.leaveDone = null;\n    }\n\n    done();\n  };\n\n  CSSTransitionGroupChild.prototype.componentWillLeave = function (done) {\n    this.setState({\n      active: false\n    });\n    this.leaveDone = done;\n  };\n\n  CSSTransitionGroupChild.prototype.render = function () {\n    var _a = this,\n        children = _a.props.children,\n        _b = _a.state,\n        active = _b.active,\n        transitionAppear = _b.transitionAppear,\n        onTransitionComplete = _a.onTransitionComplete;\n\n    return cloneElement(Children.only(children), {\n      active: active,\n      transitionAppear: transitionAppear,\n      onTransitionComplete: onTransitionComplete\n    });\n  };\n\n  return CSSTransitionGroupChild;\n}(Component);\n\nexport { CSSTransitionGroupChild };\nCSSTransitionGroupChild.defaultProps = {\n  transitionAppear: false\n};","map":null,"metadata":{},"sourceType":"module"}