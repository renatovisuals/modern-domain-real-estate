{"ast":null,"code":"var __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) d[p] = b[p];\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { createBlueprint } from \"./blueprint\";\nimport getDisplayName from \"./utils/getDisplayName\";\nimport getUniqueKey from \"./utils/getUniqueKey\";\nimport isReferentiallyTransparentFunctionComponent from \"./utils/isReferentiallyTransparentFunctionComponent\";\n\nvar hasWillReceivePropsCallback = function hasWillReceivePropsCallback(e) {\n  return e.kind === \"componentWillReceivePropsCallback\";\n};\n\nvar AssemblyBase = function (_super) {\n  __extends(AssemblyBase, _super);\n\n  function AssemblyBase(blueprint, target, isReferentiallyTransparent, props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.pendingDataUpdate = false;\n    _this.newestState = {};\n    _this.unmounted = false;\n    _this.newestProps = props;\n    _this.newestContext = context;\n    _this.isReferentiallyTransparent = isReferentiallyTransparent;\n    _this.target = target;\n    _this.callbackList = blueprint.instanceCallbacks();\n    _this.hasWillReceivePropsCallback = _this.callbackList.some(hasWillReceivePropsCallback);\n    _this.computed = _this.runInstanceCallbacks({\n      props: props,\n      context: context,\n      component: _this.target\n    });\n    _this.state = _this.newestState;\n    return _this;\n  }\n\n  AssemblyBase.prototype.getChildContext = function () {\n    return this.computed.childContext;\n  };\n\n  AssemblyBase.prototype.componentWillMount = function () {\n    return this.runLifeCycleCallbacks(\"componentWillMountCallback\");\n  };\n\n  AssemblyBase.prototype.componentDidMount = function () {\n    return this.runLifeCycleCallbacks(\"componentDidMountCallback\");\n  };\n\n  AssemblyBase.prototype.componentWillUnmount = function () {\n    this.unmounted = true;\n    return this.runLifeCycleCallbacks(\"componentWillUnmountCallback\");\n  };\n\n  AssemblyBase.prototype.componentWillUpdate = function () {\n    return this.runLifeCycleCallbacks(\"componentWillUpdateCallback\");\n  };\n\n  AssemblyBase.prototype.componentDidUpdate = function () {\n    return this.runLifeCycleCallbacks(\"componentDidUpdateCallback\");\n  };\n\n  AssemblyBase.prototype.componentWillReceiveProps = function (nextProps, nextContext) {\n    this.newestProps = nextProps;\n    this.newestContext = nextContext;\n    this.handleDataUpdate({\n      props: nextProps,\n      context: nextContext,\n      component: this.target\n    });\n  };\n\n  AssemblyBase.prototype.shouldComponentUpdate = function (nextProps, nextState, nextContext) {\n    if (this.state !== nextState && !this.hasWillReceivePropsCallback) {\n      // State based props was not computed before, do it now.\n      this.handleDataUpdate({\n        props: nextProps,\n        context: nextContext,\n        component: this.target\n      });\n    }\n\n    var callbacks = this.computed.lifeCycleCallbacks.shouldComponentUpdateCallback;\n\n    if (callbacks) {\n      for (var i = 0; i < callbacks.length; i++) {\n        if (!callbacks[i]()) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  AssemblyBase.prototype.render = function () {\n    var _a = this.computed,\n        Component = _a.component,\n        props = _a.props;\n\n    if (!Component) {\n      return null;\n    }\n\n    if (Component === this.target && this.isReferentiallyTransparent || isReferentiallyTransparentFunctionComponent(Component)) {\n      return Component(props);\n    }\n\n    return React.createElement(Component, __assign({}, props));\n  };\n\n  AssemblyBase.prototype.runLifeCycleCallbacks = function (name) {\n    var callbacks = this.computed.lifeCycleCallbacks[name];\n\n    if (callbacks) {\n      callbacks.forEach(function (cb) {\n        return cb();\n      });\n    }\n  };\n\n  AssemblyBase.prototype.applyStateDiff = function (stateDiff) {\n    this.newestState = __assign({}, this.newestState, stateDiff);\n  };\n\n  AssemblyBase.prototype.setStateWithLifeCycle = function (stateDiff, callback, init, startAt) {\n    if (init === void 0) {\n      init = this.defaultInit;\n    }\n\n    if (startAt === void 0) {\n      startAt = 0;\n    }\n\n    if (this.pendingDataUpdate) {\n      // we are in the middle of a data update.\n      if (!this.pendingDataUpdate.dirty || startAt < this.pendingDataUpdate.startAt) {\n        this.pendingDataUpdate.dirty = true;\n        this.pendingDataUpdate.init = init;\n        this.pendingDataUpdate.startAt = startAt;\n      }\n\n      if (callback) {\n        this.pendingDataUpdate.callbacks.push(callback);\n      }\n\n      this.applyStateDiff(stateDiff);\n    } else if (this.hasWillReceivePropsCallback) {\n      // runs callbacks with the new state which will run the `componentWillReceiveProps` lifecycle\n      this.handleDataUpdate(init, startAt, stateDiff, callback);\n    } else {\n      // state changes are batched and props will be recalculated in `shouldComponentUpdate`.\n      this.applyStateDiff(stateDiff);\n      this.setState(this.newestState, callback);\n    }\n  };\n\n  Object.defineProperty(AssemblyBase.prototype, \"defaultInit\", {\n    get: function get() {\n      return {\n        props: this.newestProps,\n        context: this.newestContext,\n        component: this.target\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AssemblyBase.prototype.handleDataUpdate = function (init, startAt, stateDiff, callback) {\n    if (init === void 0) {\n      init = this.defaultInit;\n    }\n\n    if (startAt === void 0) {\n      startAt = 0;\n    }\n\n    if (stateDiff === void 0) {\n      stateDiff = {};\n    }\n\n    if (callback === void 0) {\n      callback = null;\n    }\n\n    var oldState = this.newestState;\n\n    if (stateDiff) {\n      this.applyStateDiff(stateDiff);\n    }\n\n    this.pendingDataUpdate = {\n      callbacks: callback ? [callback] : []\n    };\n    this.computed = this.runInstanceCallbacks(init, startAt);\n    var callbacks = this.pendingDataUpdate.callbacks;\n    this.pendingDataUpdate = null;\n\n    if (this.newestState !== oldState) {\n      // Component could be unmounted because something during the lifecycle call can\n      // cause a parent component to unmount this before it completed its data update.\n      if (!this.unmounted) {\n        this.setState(this.newestState, function () {\n          return callbacks.forEach(function (cb) {\n            return cb();\n          });\n        });\n      }\n    }\n  };\n\n  AssemblyBase.prototype.runInstanceCallbacks = function (init, startAt) {\n    var _this = this;\n\n    if (startAt === void 0) {\n      startAt = 0;\n    }\n\n    var interim = __assign({}, init);\n\n    if (!interim.lifeCycleCallbacks) {\n      interim.lifeCycleCallbacks = {};\n    }\n\n    var _loop_1 = function _loop_1(idx) {\n      var entry = this_1.callbackList[idx];\n\n      switch (entry.kind) {\n        case \"propsCallback\":\n          interim.props = entry.callback(interim.props, this_1.newestState, interim.context);\n          break;\n\n        case \"stateCallback\":\n          {\n            var sc_1 = entry;\n\n            if (this_1.hasWillReceivePropsCallback) {\n              sc_1.init = __assign({}, interim);\n              sc_1.startAt = idx;\n            }\n\n            if (!sc_1.called) {\n              sc_1.called = true;\n\n              var initState = function initState(name, value) {\n                var unique = getUniqueKey(name, _this.newestState);\n\n                _this.applyStateDiff((_a = {}, _a[unique] = value, _a));\n\n                var updater = function updater(val, callback) {\n                  _this.setStateWithLifeCycle((_a = {}, _a[unique] = val, _a), callback, sc_1.init, sc_1.startAt);\n\n                  var _a;\n                };\n\n                return {\n                  name: unique,\n                  updater: updater\n                };\n\n                var _a;\n              };\n\n              entry.callback(initState, interim.props, this_1.newestState, interim.context);\n            }\n          }\n          break;\n\n        case \"childContextCallback\":\n          interim.childContext = entry.callback(interim.childContext, interim.props, this_1.newestState, interim.context);\n          break;\n\n        case \"skipCallback\":\n          idx += entry.callback(interim.props, this_1.newestState, interim.context);\n          break;\n\n        case \"renderCallback\":\n          interim.component = entry.callback(interim.component, interim.props, this_1.newestState, interim.context);\n          break;\n\n        case \"lazyLoadCallback\":\n          var list = entry.callback(interim.props, this_1.newestState, interim.context);\n\n          if (list && list.length > 0) {\n            this_1.callbackList = this_1.callbackList.slice(0, idx + 1).concat(list, this_1.callbackList.slice(idx + 1));\n\n            if (!this_1.hasWillReceivePropsCallback) {\n              this_1.hasWillReceivePropsCallback = list.some(hasWillReceivePropsCallback);\n            }\n          }\n\n          break;\n\n        case \"componentWillReceivePropsCallback\":\n          {\n            var cc = entry;\n            var callback = entry.callback(interim.props, this_1.newestState, interim.context);\n\n            if (cc.called && this_1.pendingDataUpdate) {\n              // Props changed so we need to run this lifecycle.\n              callback();\n\n              if (this_1.pendingDataUpdate.dirty) {\n                // State changed during lifecycle, so we need to recalculated from an earlier position.\n                this_1.pendingDataUpdate.dirty = false;\n                return {\n                  value: this_1.runInstanceCallbacks(this_1.pendingDataUpdate.init, this_1.pendingDataUpdate.startAt)\n                };\n              }\n            } else {\n              cc.called = true;\n            }\n          }\n          break;\n\n        case \"componentWillMountCallback\":\n        case \"componentDidMountCallback\":\n        case \"componentWillUnmountCallback\":\n        case \"shouldComponentUpdateCallback\":\n        case \"componentWillUpdateCallback\":\n        case \"componentDidUpdateCallback\":\n          {\n            var hasCallbacks = interim.lifeCycleCallbacks[entry.kind] !== undefined;\n            var callback = entry.callback(interim.props, this_1.newestState, interim.context);\n            interim.lifeCycleCallbacks = __assign({}, interim.lifeCycleCallbacks, (_a = {}, _a[entry.kind] = hasCallbacks ? interim.lifeCycleCallbacks[entry.kind].concat([callback]) : [callback], _a));\n          }\n          break;\n\n        default:\n          throw new Error(\"Unknown callback entry '\" + entry.kind + \"'\");\n      }\n\n      out_idx_1 = idx;\n\n      var _a;\n    };\n\n    var this_1 = this,\n        out_idx_1;\n\n    for (var idx = startAt; idx < this.callbackList.length; idx++) {\n      var state_1 = _loop_1(idx);\n\n      idx = out_idx_1;\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n\n    return interim;\n  };\n\n  return AssemblyBase;\n}(Component);\n\nexport function assemble() {\n  var callbacks = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    callbacks[_i] = arguments[_i];\n  }\n\n  var blueprint = createBlueprint.apply(void 0, callbacks);\n  return function (target) {\n    var isReferentiallyTransparent = isReferentiallyTransparentFunctionComponent(target);\n    var targetName = getDisplayName(target);\n    var assembled = (_a = function (_super) {\n      __extends(class_1, _super);\n\n      function class_1(props, context) {\n        return _super.call(this, blueprint, target, isReferentiallyTransparent, props, context) || this;\n      }\n\n      return class_1;\n    }(AssemblyBase), _a.displayName = isReferentiallyTransparent ? targetName : \"Assembled(\" + targetName + \")\", _a);\n    blueprint.staticCallbacks.forEach(function (cb) {\n      return cb(assembled, target);\n    });\n    return assembled;\n\n    var _a;\n  };\n}\nexport default assemble;","map":null,"metadata":{},"sourceType":"module"}