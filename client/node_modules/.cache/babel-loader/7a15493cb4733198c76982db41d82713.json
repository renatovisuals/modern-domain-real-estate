{"ast":null,"code":"/* tslint:disable: no-bitwise */\nimport { lazyLoadCallback, skipCallback } from \"./blueprint\";\nimport resolveValue from \"./utils/resolveValue\";\nimport toArray from \"./utils/toArray\";\n\nvar resolveCallbacks = function resolveCallbacks(list) {\n  return list.reduce(function (result, c) {\n    result.push.apply(result, resolveValue(c.instanceCallbacks));\n    return result;\n  }, []);\n};\n\nexport function branch(test, left, right) {\n  if (right === void 0) {\n    right = [];\n  }\n\n  var leftList = toArray(left);\n  var rightList = toArray(right);\n  return {\n    instanceCallbacks: function instanceCallbacks() {\n      var loaded = {\n        left: false,\n        right: false\n      };\n      var isTrue;\n      return [lazyLoadCallback(function (props) {\n        isTrue = test(props);\n\n        if (!loaded.left && isTrue) {\n          loaded.left = true;\n          var newCallbacks = resolveCallbacks(leftList);\n          var skip_1 = newCallbacks.length;\n          newCallbacks.unshift(skipCallback(function () {\n            return isTrue ? 0 : skip_1;\n          }));\n          return newCallbacks;\n        }\n\n        if (!loaded.right && !isTrue) {\n          loaded.right = true;\n          var newCallbacks = resolveCallbacks(rightList);\n          var skip_2 = newCallbacks.length;\n          newCallbacks.unshift(skipCallback(function () {\n            return isTrue ? skip_2 : 0;\n          }));\n          return newCallbacks;\n        }\n\n        return null;\n      })];\n    }\n  };\n}\nexport default branch;","map":null,"metadata":{},"sourceType":"module"}